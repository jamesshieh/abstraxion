#!/usr/bin/env ruby

$LOAD_PATH.unshift(File.expand_path(File.join(File.dirname(__FILE__),".." , "lib")))
require 'abstraction'

grid = Grid.new(5,5)

grid.grid[0][0] = Generator.new(grid.id)
grid.grid[0][2] = Amplifier.new(grid.id)
grid.grid[1][2] = Splitter.new(grid.id)
grid.grid[2][2] = Switcher.new(grid.id)

grid.set_neighbors

grid.create_connection(0, 0, :E)
grid.create_connection(1, 0, :E)
grid.create_connection(2, 0, :S)
grid.create_connection(2, 1, :S)
grid.create_connection(2, 1, :W)
grid.create_connection(2, 2, :S)
grid.create_connection(1, 1, :S)
grid.create_connection(2, 2, :E)
grid.create_connection(1, 1, :W)
grid.create_connection(0, 1, :N)

def pp_grid(grid)
  grid.grid_iterator.each do |node|
    puts "Node: #{node.id}, #{node.class}"
    puts "Pulses: #{node.pulses}"
    if node.class.superclass == SingleNode
      puts "Connections: #{node.out_conn.id if !node.out_conn.nil?}"
    elsif node.class.superclass == MultiNode
      neighbors = node.out_conn.select{ |key, value| key if value == 1 }
      print "Connections: "
      neighbors.each do |key, value|
        print "#{node.neighbors[key].id} "
      end
      puts
    end
    puts "----"
  end
end

20.times do
  pp_grid(grid)
  puts "Grid Received: #{grid.step}"
end
#class Game < Chingu::Window
#  def initialize
#    super(1280, 720, false)
#    push_game_state(Play)
#  end
#end
#
#class Play < Chingu::GameState
#  def initialize
#    super
#  end
#  def draw
#    super
#  end
#  def update
#    super
#    $window.caption = "FPS: #{$window.fps}"
#  end
#end
#
#Game.new.show
#
