#!/usr/bin/env ruby

$LOAD_PATH.unshift(File.expand_path(File.join(File.dirname(__FILE__),".." , "lib")))
require 'abstraxion'
require 'colorize'
require 'debugger'

# Node printouts
# 0000
NODE = "\u00B7"
# 1000
NNODE = "\u2575"
NCHARGENODE = "\u2579"
# 0100
SNODE = "\u2577"
SCHARGENODE = "\u257B"
# 0010
ENODE = "\u2576"
ECHARGENODE = "\u257A"
# 0001
WNODE = "\u2574"
WCHARGENODE = "\u2578"
# 1001
NWNODE = "\u2518"
NWCHARGENODE = "\u251B"
# 0101
SWNODE =  "\u2510"
SWCHARGENODE = "\u2513"
# 1010
NENODE = "\u2514"
NECHARGENODE = "\u2517"
# 1100
NSNODE = "\u2502"
NSCHARGENODE = "\u2503"
# 0110
SENODE = "\u250C"
SECHARGENODE = "\u250F"
# 0011
EWNODE = "\u2500"
EWCHARGENODE = "\u2501"
# 0111
SEWNODE = "\u252C"
SEWCHARGENODE = "\u2533"
# 1101
NSWNODE = "\u2524"
NSWCHARGENODE = "\u252B"
# 1110
NSENODE = "\u251C"
NSECHARGENODE = "\u2523"
# 1011
NEWNODE = "\u2534"
NEWCHARGENODE = "\u253B"
# 1101
NSEWNODE = "\u253C"
NSEWCHARGENODE = "\u254B"


# Manual test map creation
class Map
  include PulseEngine
  include TowerAbxn
  include MapAbxn
  include NodeAbxn
  attr_accessor :tower, :generator
  def initialize
    @tower = MapAbxn::Tower.new(5,5)
    @tower.grid.grid[0][2].set_type(:amplifier)
    @tower.grid.grid[1][1].set_type(:splitter)
    @tower.grid.grid[2][2].set_type(:splitter)
    @tower.grid.grid[1][2].set_type(:switcher)
    @tower.grid.grid[3][2].set_type(:splitter)
    @tower.grid.grid[3][3].set_type(:switcher)
    @tower.grid.set_neighbors
    @tower.grid.create_connection(0, 0, :E)
    @tower.grid.create_connection(1, 0, :E)
    @tower.grid.create_connection(2, 0, :S)
    @tower.grid.create_connection(2, 1, :S)
    @tower.grid.create_connection(2, 1, :W)
    @tower.grid.create_connection(1, 1, :S)
    @tower.grid.create_connection(1, 1, :W)
    @tower.grid.create_connection(0, 1, :N)
    @tower.grid.create_connection(2, 2, :S)
    @tower.grid.create_connection(2, 2, :E)
    @tower.grid.create_connection(3, 2, :S)
    @tower.grid.create_connection(2, 3, :S)
    @tower.grid.create_connection(2, 3, :W)
    @tower.grid.create_connection(1, 3, :W)
    @tower.grid.create_connection(0, 3, :N)
    @tower.grid.create_connection(0, 2, :N)
    @tower.grid.create_connection(1, 2, :S)
    @tower.grid.create_connection(3, 4, :W)
    @tower.grid.create_connection(3, 3, :S)
    @tower.grid.create_connection(2, 4, :W)
    @tower.grid.create_connection(1, 4, :N)
    @tower.grid.create_connection(3, 3, :E)
    @tower.grid.create_connection(4, 3, :N)
    @tower.grid.create_connection(4, 2, :N)
    @tower.grid.create_connection(4, 1, :N)
    @tower.grid.create_connection(4, 0, :W)
    @tower.grid.create_connection(3, 0, :W)

    @generator = MapAbxn::Generator.new(3, @tower)
    @monster = Mob.new("Poring", 100, 5)
  end

  def update
    puts "Monster #{@monster.name} has #{@monster.hp} hp left!"
    @generator.update
    pulse = @tower.update
    if !pulse.empty?
      tower_shot = pulse.pop
      @monster.take_damage(tower_shot.amplitude)
    end
    if !@monster.alive?
      puts "#{@monster.name} Defeated!"
      puts "A New Challenger Appears!"
      @monster = Mob.new("Super Poring", 1000, 100)
    end
  end
end


# Grid printing functions

def node_print(node, charge)
  connections = node.connections.values.join
  if !charge
    case connections
    when "0000"
      NODE
    when "0001"
      WNODE
    when "0010"
      ENODE
    when "0100"
      SNODE
    when "1000"
      NNODE
    when "1100"
      NSNODE
    when "0110"
      SENODE
    when "0011"
      EWNODE
    when "1001"
      NWNODE
    when "1010"
      NENODE
    when "0101"
      SWNODE
    when "1110"
      NSENODE
    when "0111"
      SEWNODE
    when "1011"
      NEWNODE
    when "1101"
      NSWNODE
    when "1111"
      NSEWNODE
    end
  else
    case connections
    when "0000"
      NODE
    when "0001"
      WCHARGENODE
    when "0010"
      ECHARGENODE
    when "0100"
      SCHARGENODE
    when "1000"
      NCHARGENODE
    when "1100"
      NSCHARGENODE
    when "0110"
      SECHARGENODE
    when "0011"
      EWCHARGENODE
    when "1001"
      NWCHARGENODE
    when "1010"
      NECHARGENODE
    when "0101"
      SWCHARGENODE
    when "1110"
      NSECHARGENODE
    when "0111"
      SEWCHARGENODE
    when "1011"
      NEWCHARGENODE
    when "1101"
      NSWCHARGENODE
    when "1111"
      NSEWCHARGENODE
    end

  end
end

def pp_visual_grid(grid)
  i = 0
  grid.grid_iterator.each do |node|
    if i == 5
      i = 0
      puts
    end
    if !node.pulses.empty?
      print node_print(node, true).red
    else
      case node.type
      when :originator
        print node_print(node, false).red
      when :basic
        print node_print(node, false).white
      when :splitter
        print node_print(node, false).green
      when :switcher
        print node_print(node, false).blue
      when :amplifier
        print node_print(node, false).yellow
      end
    end
    i += 1
  end
end

class Mob
  attr_reader :hp, :name
  def initialize(name, hp, damage)
    @name = name
    @hp = hp
    @damage = damage
  end

  def take_damage(damage)
    @hp -= damage
  end

  def alive?
    hp > 0 ? true : false
  end
end

# Console loop
map = Map.new
loop do
  gets
  pp_visual_grid(map.tower.grid)
  puts
  map.update
end
